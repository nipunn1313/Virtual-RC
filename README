18-549 Embedded Systems Capstone Project

Virtual RC

Requires the OpenCV library (with the python wrapper). Instructions for
installing it on Ubuntu here:

https://help.ubuntu.com/community/OpenCV

Requires tons of libraries. At least(!):
	OpenCV 2.7 (anything before doesn't have BackgroundMOGSubtractor2)
	libboost1.46-dev
	libbost1.46-all-dev
	libpython2.7 (compiling from source is hard! Find the repo if you can
			and install using aptitude)
	cvbloblibs8.3 (need to compile from source. Compile with -fPIC (modify
				Makefile))

For running the tracker, use the Makefile in cpp. In the python interpreter:
import MOGBlob
MOGBlob.init_tracker

=======================================================================
==============TODO: This is outdated==============

There are a few parts to our algorithm:
lkdemo.py
	-OpenCVExample
	-Allows you to do blob tracking using cvCalcOpticalFlowPyrLK()
		-Requires static initialization of blob

cvCalcOpticalFlowLK()
	-Generic optical flow implemented using the LK algorithm

FindCornerSubPix()/GoodFeaturesToTrack()
	-OpenCV functions that allow us to pick out features of the image
	(either generically or using our own "criteria")
	-Documentation here:
		http://opencv.willowgarage.com/documentation/python/imgproc_feature_detection.html

Color detection
	-Used to differentiate cars

Color smoothing
	-Allow cars to be differentiated from other "features"

Optical flow filtering
	-If the camera is obstructed, allows you to probabilistically predict
	its position based on previous optical flow history

Tracking algorithm:
	-Initialize blobs statically during race start or when a car dies
	(because it must be placed back onto the track at a designated spot
	 where we can detect it for tracking and then reenable the car's 
	 movement)
		-Use feature detection and color detection to differentiate cars
		from the background and each other
		-May need color smoothing
	-For each frame, we need to find the car again (assuming 15fps then we
			have 1/15 seconds per frame. Possibly too fast. If so,
			ignore every few frames)
		-First, use the location of the previous blob to look at
		features (faster and more accurate than searching the entire
				frame for the car)
			-May be faster to use optical flow to determine which
				area to search	
		-Use color detection to match a car (better than matching a
				static/constant color because of lighting or 
				projector colors causing problems)
		-Search for area around matching features for the rest of the
		car
